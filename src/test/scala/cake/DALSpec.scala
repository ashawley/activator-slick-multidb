import org.specs2.mutable.Specification
import org.specs2.concurrent.ExecutionEnv
import org.specs2.mutable.After
import org.scalamock.specs2.IsolatedMockFactory
import org.specs2.matcher.ThrownExpectations

import slick.driver.{H2Driver, SQLiteDriver}
import slick.jdbc.JdbcBackend.Database
import slick.util.AsyncExecutor
import slick.dbio.DBIO

class DALSpec extends Specification with IsolatedMockFactory with After {

  val connection = stub[java.sql.Connection]
  val dataSource = stub[slick.jdbc.JdbcDataSource]
  val preparedStatement = stub[java.sql.PreparedStatement]

  val executor = AsyncExecutor.default("DALSpec")

  val db = new Database(dataSource, executor)

  val h2 = new DAL(H2Driver)
  val sqlite = new DAL(SQLiteDriver)

  "H2 driver" should {

    "have a config" in {
      Database.forConfig("h2") must beAnInstanceOf[Database]
    }

    "have a DAL" in {
      h2 must beAnInstanceOf[DAL]
    }

    "be an instance of a database" in {
      db must beAnInstanceOf[Database]
    }

    "create" in { implicit context: ExecutionEnv =>

      // Configure stubs
      (dataSource.createConnection _).when().returns(connection)
      (connection.prepareStatement (_: String)).when("create table \"USERS\" (\"USER_NAME\" VARCHAR NOT NULL,\"PIC_ID\" INTEGER NOT NULL,\"USER_ID\" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY)").returns(preparedStatement).once
      (connection.prepareStatement (_: String)).when("create table \"PICTURES\" (\"PIC_URL\" VARCHAR NOT NULL,\"PIC_ID\" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY)").returns(preparedStatement).once

      // Run and check the future
      db.run {
        h2.create
      } must beEqualTo((): Unit).await
    }
  }

  "SQLite driver" should {

    "have a config" in {
      Database.forConfig("sqlite") must beAnInstanceOf[Database]
    }

    "have a DAL" in {
      sqlite must beAnInstanceOf[DAL]
    }

    "be an instance of a database" in {
      db must beAnInstanceOf[Database]
    }

    "create" in { implicit context: ExecutionEnv =>

      // Configure stubs
      (dataSource.createConnection _).when().returns(connection)
      (connection.prepareStatement (_: String)).when("create table \"USERS\" (\"USER_NAME\" VARCHAR(254) NOT NULL,\"PIC_ID\" INTEGER NOT NULL,\"USER_ID\" INTEGER PRIMARY KEY AUTOINCREMENT)").returns(preparedStatement).once
      (connection.prepareStatement (_: String)).when("create table \"PICTURES\" (\"PIC_URL\" VARCHAR(254) NOT NULL,\"PIC_ID\" INTEGER PRIMARY KEY AUTOINCREMENT)").returns(preparedStatement).once

      // Run and check the future
      db.run {
        sqlite.create
      } must beEqualTo((): Unit).await
    }

    "insert picture" in { implicit context: ExecutionEnv =>

      // Configure stubs
      (dataSource.createConnection _).when().returns(connection)
      (connection.prepareStatement (_: String, _: Array[java.lang.String])).when("insert into \"PICTURES\" (\"PIC_URL\")  values (?)", *).returns(preparedStatement).once

      // Run and check the future
      db.run {
        sqlite.insert(Picture("http://pics/default"))
      } must throwA(new NoSuchElementException("Invoker.first")).await
    }

    "insert user" in { implicit context: ExecutionEnv =>

      // Configure stubs
      (dataSource.createConnection _).when().returns(connection)
      (connection.prepareStatement (_: String, _: Array[java.lang.String])).when("insert into \"PICTURES\" (\"PIC_URL\")  values (?)", *).returns(preparedStatement).once
      // (connection.prepareStatement (_: String)).when("create table \"PICTURES\" (\"PIC_URL\" VARCHAR(254) NOT NULL,\"PIC_ID\" INTEGER PRIMARY KEY AUTOINCREMENT)").returns(preparedStatement).once

      // Run and check the future
      db.run {
        sqlite.insert(User("name1", Picture("http://pics/default")))
      } must throwA(new NoSuchElementException("Invoker.first")).await
    }
  }

  def after = {
    Util.unloadDrivers
  }
}
